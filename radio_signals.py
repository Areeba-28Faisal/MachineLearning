# -*- coding: utf-8 -*-
"""RADio_signals.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19g7KlQjoF5miExbdkzQeYidzvMTfxyC8

Interfernce patterns for dataset 1 and dataset 2:

report link is added her:
https://docs.google.com/document/d/1l_UkFokUzV-W2wyQ-1z7gm9riFjZTHEq8nNi0lCv13c/edit?usp=sharing
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Load the dataset
data1 = pd.read_excel('/content/drive/MyDrive/Datasets/newData 1.xlsx',)
# Load the dataset
data= pd.read_excel('/content/drive/MyDrive/Datasets/newData.xlsx')

df = data.drop(data[data['freq'] == 0].index)
df1 = data1.drop(data1[data1['freq'] == 0].index)

df1=df1.tail(5000)
df=df.tail(5000)
print(df,df1)

df1= df1.dropna(axis=1, how='all')
df= df.dropna(axis=1, how='all')

df1=df1.drop(['state','angle'],axis=1)
df=df.drop(['state','angle'],axis=1)
df['time'] = pd.to_datetime(df['time'],format='%m/%d/%Y %H:%M:%S')

fig = plt.figure(figsize=(18, 7))
plt.scatter(df['time'], df['freq'], c=df['snr'], cmap='viridis')
plt.xlabel('Time')
plt.ylabel('Frequency')
plt.colorbar(label='dB SNR')
plt.show()

df['time'] = pd.to_datetime(df['time'],format='%m/%d/%Y %H:%M:%S')
#df['datetime'] = pd.to_datetime(df['datetime'])

# extract the date and time columns
df['date'] = df['time'].dt.date
df['time'] = df['time'].dt.time
df1['time'] = pd.to_datetime(df1['time'], format='%m/%d/%Y %H:%M:%S')
df1['date'] = df1['time'].dt.date
df1['time'] = df1['time'].dt.time

df1 = df1.reset_index(drop=True)

df1

df = df.reset_index(drop=True)

df
print(type(df['time'].tail(1)))

fig = plt.figure(figsize=(18, 7))
plt.scatter(df['time'].astype(str), df['freq'], c=df['snr'], cmap='viridis')
plt.xlabel('Time')
plt.ylabel('Frequency')
plt.colorbar(label='dB SNR')
plt.show()

fig = plt.figure(figsize=(18, 7))
plt.scatter(df1['time'].astype(str), df1['freq'], c=df1['snr'], cmap='viridis')
plt.xlabel('Time')
plt.ylabel('Frequency')
plt.colorbar(label='dB SNR')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Filter the data for a particular timestamp
timestamp = '11:58:14'
data1_filtered = df1[df1['time'].astype(str)== timestamp]
data_filtered = df[df['time'].astype(str) == timestamp]

# Plot the interference between the two datasets
plt.scatter(data1_filtered['freq'], data1_filtered['snr'], c='blue', marker='o', label='Dataset 1')
plt.scatter(data_filtered['freq'], data_filtered['snr'], c='red', marker='x', label='Dataset 2')
plt.title(f'Interference between datasets at timestamp {timestamp}')
plt.xlabel('Frequency')
plt.ylabel('SNR')
plt.legend()
plt.show()

"""This is the plot which shows interference at any time instant between the two datasets.

by comparing the snr and frequency values at these time instants we can determine that dataset 2 has more elements and has more of an effect on the values of the final signal output. 


"""

# Group the data by timestamp
##so the data can be seen easily we have taken small part of the dataset for visualisation.

df_ = df1.iloc[:100]

groups = df_.groupby('frameId')

# Iterate over each group and plot the frequency vs SNR values
for name, group in groups:
    plt.plot(group['freq'], group['time'].astype(str), label=name)

# Add axis labels and title
plt.xlabel('Frequency')
plt.ylabel('time')
plt.title('Frequency vs time for each timestamp')

# Add a legend and show the plot
plt.legend()
plt.show()

# Group the data by timestamp
df_ = df.iloc[:200]

groups = df_.groupby('frameId')

# Iterate over each group and plot the frequency vs SNR values
for name, group in groups:
    plt.plot(group['freq'], group['time'].astype(str), label=name)

# Add axis labels and title
plt.xlabel('Frequency')
plt.ylabel('time')
plt.title('Frequency vs time for each timestamp')

# Add a legend and show the plot
plt.legend()
plt.show()

"""From here we can easily observe which frequencies are reapeating or not.
and also after a time interval of how many seconds.
 This kind of visualisation makes it much more easier to understand the data.
"""

start = pd.Timestamp('11:56:12')
end = pd.Timestamp('11:57:12')
start_time= start.time()
end_time=end.time()
#df['time'] = df['time'].dt.time
start_time='11:56:12'
end_time='11:57:12'

# Select the data within the time range for both datasets
df1_range = df1.loc[(df1['time'].astype(str) >= start_time) & (df1['time'].astype(str) <= end_time)]
print(df1_range)
df_range = df.loc[(df['time'].astype(str) >= start_time) & (df['time'].astype(str) <= end_time)]


plt.scatter(df1_range['time'].astype(str), df1_range['freq'], c='blue', marker='o', label='Dataset 1')
plt.scatter(df_range['time'].astype(str), df_range['freq'], c='red', marker='x', label='Dataset 2')
plt.title(f'Interference between datasets at timestamp {start_time} and {end_time}')
plt.xlabel('Time')
plt.ylabel('Frequency')
plt.legend()
plt.show()

# Plot the data for both datasets
#fig, axs = plt.subplots(nrows=2, sharex=True, figsize=(10, 6))

fig = plt.figure(figsize=(18, 7))
plt.scatter(df1_range['time'].astype(str), df1_range['freq'], c=df1_range['snr'], cmap='viridis')
plt.xlabel('Time')
plt.ylabel('Frequency')
plt.colorbar(label='dB SNR')
plt.show()

fig1 = plt.figure(figsize=(18, 7))
plt.scatter(df_range['time'].astype(str), df_range['freq'], c=df_range['snr'], cmap='viridis')
plt.xlabel('Time')
plt.ylabel('Frequency')
plt.colorbar(label='dB SNR')
plt.show()

#plt.show()